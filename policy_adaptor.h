
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__policy_adaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__policy_adaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++-1/dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace keti {
namespace bmc {

class policy_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    policy_adaptor()
    : ::DBus::InterfaceAdaptor("org.freedesktop.keti.bmc.policy")
    {
        register_method(policy_adaptor, policy_feedback, _policy_feedback_stub);
        register_method(policy_adaptor, policy_ibmc, _policy_ibmc_stub);
        register_method(policy_adaptor, policy_monitor, _policy_monitor_stub);
        register_method(policy_adaptor, policy_energy, _policy_energy_stub);
        register_method(policy_adaptor, policy_ssp, _policy_ssp_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument policy_feedback_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument policy_ibmc_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument policy_monitor_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument policy_energy_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument policy_ssp_args[] = 
        {
            { "result", "i", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod policy_adaptor_methods[] = 
        {
            { "policy_feedback", policy_feedback_args },
            { "policy_ibmc", policy_ibmc_args },
            { "policy_monitor", policy_monitor_args },
            { "policy_energy", policy_energy_args },
            { "policy_ssp", policy_ssp_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod policy_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty policy_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface policy_adaptor_interface = 
        {
            "org.freedesktop.keti.bmc.policy",
            policy_adaptor_methods,
            policy_adaptor_signals,
            policy_adaptor_properties
        };
        return &policy_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual int32_t policy_feedback() = 0;
    virtual int32_t policy_ibmc() = 0;
    virtual int32_t policy_monitor() = 0;
    virtual int32_t policy_energy() = 0;
    virtual int32_t policy_ssp() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _policy_feedback_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = policy_feedback();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _policy_ibmc_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = policy_ibmc();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _policy_monitor_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = policy_monitor();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _policy_energy_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = policy_energy();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _policy_ssp_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        int32_t argout1 = policy_ssp();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } } 
#endif //__dbusxx__policy_adaptor_h__ADAPTOR_MARSHAL_H
